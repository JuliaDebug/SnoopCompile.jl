export precompileActivator, precompileDeactivator

"""
    precompileActivator(packageName, filePath)

Activates precompile of a package by adding or uncommenting include() of *.jl file generated by SnoopCompile and _precompile_().

Written exclusively for SnoopCompile Github actions.
"""
function precompileActivator(packageName::String, filePath::String = pathof(eval(Meta.parse(packageName))) )

    file = open(filePath,"r")
    packageText = read(file, String)
    close(file)

    # Checking availability of _precompile_ code
    commented = occursin("#include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")", packageText)  && occursin("#_precompile_()", packageText)

    available = occursin("include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")", packageText)  && occursin("_precompile_()", packageText)

    if commented
        packageEdited = foldl(replace,
                     (
                      "#include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")" => "include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")",
                      "#_precompile_()" => "_precompile_()",
                     ),
                     init = packageText)

                     file = open(filePath,"w")
                     write(file, packageEdited)
                     close(file)
    elseif available
        # do nothing
    else
        # TODO: add code automatiaclly
        error(""" add the following codes into your package:
         include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")
         _precompile_()
         """)
    end

end

precompileActivator(packageName::Symbol, filePath::String = pathof(eval(packageName)) ) = precompileActivator(string(packageName), filePath)


"""
    precompileDeactivator(packageName, filePath)

Deactivates precompile of a package by commenting include() of *.jl file generated by SnoopCompile and _precompile_().

Written exclusively for SnoopCompile Github actions.
"""
function precompileDeactivator(packageName::String, filePath::String = pathof(eval(Meta.parse(packageName)))  )

    file = open(filePath,"r")
    packageText = read(file, String)
    close(file)

    # Checking availability of _precompile_ code
    commented = occursin("#include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")", packageText)  && occursin("#_precompile_()", packageText)

    available = occursin("include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")", packageText)  && occursin("_precompile_()", packageText)

    if available && !commented
        packageEdited = foldl(replace,
                     (
                      "include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")" => "#include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")",
                      "_precompile_()" => "#_precompile_()",
                     ),
                     init = packageText)

                    file = open(filePath,"w")
                    write(file, packageEdited)
                    close(file)
    elseif commented
        # do nothing
    else
        # TODO: add code automatiaclly
        error(""" add the following codes into your package:
         include(\"../deps/SnoopCompile/precompile/precompile_$packageName.jl\")
         _precompile_()
         """)
    end

end

precompileDeactivator(packageName::Symbol, filePath::String) = precompileDeactivator(string(packageName), filePath  = pathof(eval(packageName)) )
