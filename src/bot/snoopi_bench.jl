################################################################
"""
    timesum(snoop)

Calculates and prints the total time measured by a snoop macro.

It is used inside @snoopi_bench. Julia can cache inference results so to measure the effect of adding _precompile_() sentences generated by snoopi to your package, use the [`@snoopi_bench`](@ref). This benchmark measures inference time taken during loading and running of a package.

# Examples
```julia
using SnoopCompile
data = @snoopi begin
    include(joinpath(dirname(dirname(pathof(MatLang))),"test","runtests.jl"))
end;
println(timesum(data));
```

## Manual Benchmark (withtout using [`@snoopi_bench`](@ref))
- dev your package

- comment the precompile part of your package (`include()` and `_precompile_()`)
- run the following benchmark
- restart Julia

- uncomment the precompile part of your package (`include()` and `_precompile_()`)
- run the following benchmark
- restart Julia

### Benchmark
```julia
using SnoopCompile

println("Package load time:")
loadSnoop = @snoopi using MatLang

timesum(loadSnoop)

println("Running Examples/Tests:")
runSnoop = @snoopi begin
    using MatLang
    include(joinpath(dirname(dirname(pathof(MatLang))),"test","runtests.jl"))
end

timesum(runSnoop)
```
"""
function timesum(snoop::Vector{Tuple{Float64, Core.MethodInstance}})
    if isempty(snoop)
        return 0.0
    else
        return sum(first, snoop)
    end
end
################################################################
function snoopi_bench(config::BotConfig, snoop_script::Expr)

    package_name = config.package_name
    package_path = pathof_noload(package_name)

    ################################################################
    juliaCode = """
    using SnoopCompile; data = @snoopi begin
        $(string(snoop_script));
    end;
    @info(timesum(data));
    """
    julia_cmd = `julia --project=@. -e "$juliaCode"`
    out = quote
        package_sym = Symbol($package_name)
        ################################################################
        using SnoopCompile
        @info("""*******************
        Benchmark Started
        *******************
        """)
        ################################################################
        @info("""Precompile Deactivated Benchmark
        ------------------------
        """)
        precompile_deactivator($package_path);
        ### Log the compiles
        run($julia_cmd)
        ################################################################
        @info("""Precompile Activated Benchmark
        ------------------------
        """)
        precompile_activator($package_path);
        ### Log the compiles
        run($julia_cmd)
        @info("""*******************
        Benchmark Finished
        *******************
        """)
    end
    return out
end

################################################################
"""
    @snoopi_bench botconfig::BotConfig, snoop_script::Expr

Performs an infertime benchmark by activating and deactivating the _precompile_()
# Examples
Benchmarking the load infer time
```julia
println("loading infer benchmark")

@snoopi_bench BotConfig("MatLang") begin
 using MatLang
end
```

Benchmarking the example infer time
```julia
println("examples infer benchmark")

@snoopi_bench BotConfig("MatLang") begin
    using MatLang
    example_path = joinpath(dirname(dirname(pathof(MatLang))), "examples")
    # include(joinpath(example_path,"Language_Fundamentals", "usage_Entering_Commands.jl"))
    include(joinpath(example_path,"Language_Fundamentals", "usage_Matrices_and_Arrays.jl"))
    include(joinpath(example_path,"Language_Fundamentals", "Data_Types", "usage_Numeric_Types.jl"))
end
```
"""
macro snoopi_bench(configExpr, snoop_script)
    config = eval(configExpr)
    out = snoopi_bench(config, snoop_script)
    return out
end

macro snoopi_bench(package_name::AbstractString, snoop_script)
    f, l = __source__.file, __source__.line
    @warn "Replace `\"$package_name\"` with `BotConfig(\"$package_name\")`. That syntax will be deprecated in future versions. \n Happens at $f:$l"

    config = BotConfig(package_name)

    out = snoopi_bench(config, snoop_script)
    return out
end

################################################################
function snoopi_bench(config::BotConfig)

    package_name = config.package_name

    package = Symbol(package_name)
    package_rootpath = dirname(dirname(pathof_noload(package_name)))
    runtestpath = joinpath(package_rootpath, "test", "runtests.jl");

    snoop_script = quote
        using $(package);
        include($runtestpath);
    end
    out = snoopi_bench(config, snoop_script)
    return out
end

"""
    @snoopi_bench config::BotConfig

Benchmarking the infer time of the tests:
```julia
@snoopi_bench BotConfig("MatLang")
```
"""
macro snoopi_bench(configExpr)
    config = eval(configExpr)
    out = snoopi_bench(config)
    return out
end

macro snoopi_bench(package_name::AbstractString)
    f, l = __source__.file, __source__.line
    @warn "Replace `\"$package_name\"` with `BotConfig(\"$package_name\")`. That syntax will be deprecated in future versions. \n Happens at $f:$l"

    config = BotConfig(package_name)

    out = snoopi_bench(config)
    return out
end
